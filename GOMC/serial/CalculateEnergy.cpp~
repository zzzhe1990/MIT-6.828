#include "CalculateEnergy.h"        //header for this
#include "EnergyTypes.h"            //Energy structs
#include "EnsemblePreprocessor.h"   //Flags
#include "../lib/BasicTypes.h"             //uint
#include "System.h"                 //For init
#include "StaticVals.h"             //For init
#include "Forcefield.h"             //
#include "MoleculeLookup.h"
#include "MoleculeKind.h"
#include "Coordinates.h"
#include "BoxDimensions.h"
#include "cbmc/TrialMol.h"
#include "../lib/GeomLib.h"
#include <cassert>

//
//    CalculateEnergy.cpp
//    Energy Calculation functions for Monte Carlo simulation
//    Calculates using const references to a particular Simulation's members
//    Brock Jackman Sep. 2013
//
//    Updated to use radial-based intermolecular pressure
//    Jason Mick    Feb. 2014
//

#define REAL
#define RECIP
//#define DEBUG
using namespace geom;
extern bool DoEwald;

const double qqfact = 167000.00;
const double kmax1 = 6.0;
const double ALPHA = 1.097;

CalculateEnergy::CalculateEnergy(StaticVals const& stat, System & sys) :
   forcefield(stat.forcefield), mols(stat.mol), currentCoords(sys.coordinates),
   currentCOM(sys.com), sysPotRef(sys.potential), alpha(ALPHA), DoEwald(false), kmax1(0.0), alpha(0.0),
#ifdef VARIABLE_PARTICLE_NUMBER
   molLookup(sys.molLookup),
#else
   molLookup(stat.molLookup),
#endif
#ifdef VARIABLE_VOLUME
   currentAxes(sys.boxDimensions)
#else
   currentAxes(stat.boxDimensions)
#endif
#ifdef CELL_LIST
   , cellList(sys.cellList)
#endif
{ }

CalculateEnergy::~CalculateEnergy(){
  delete[] MolSelfEnergy;
  delete[] RecipSinSum;
  delete[] RecipCosSum;
  delete[] SinSumNew;
  delete[] CosSumNew;
  delete[] calp;
}


void CalculateEnergy::Init()
{
   for(uint m = 0; m < mols.count; ++m)
   {
      const MoleculeKind& molKind = mols.GetKind(m);
      for(uint a = 0; a < molKind.NumAtoms(); ++a)
      {
         particleKind.push_back(molKind.AtomKind(a));
         particleMol.push_back(m);
	 particleCharge.push_back(molKind.atomCharge[a]);
      }
   }
   calp = (double*)malloc(BOX_TOTAL);
   std::fill_n(calp, BOX_TOTAL, 0.0);
#ifdef RECIP
   for(int box = 0; box < BOX_TOTAL; box++){
     //calculate the alpha over box size.
     Calp(box, currentAxes.axis.BoxSize(box));
     SetupRecip(box);   
   }
   RecipSinSum = new double[RecipSize[0] * BOXES_WITH_U_NB];
   RecipCosSum = new double[RecipSize[0] * BOXES_WITH_U_NB];
   SinSumNew = new double[RecipSize[0] * BOXES_WITH_U_NB];
   CosSumNew = new double[RecipSize[0] * BOXES_WITH_U_NB];
#endif
   //malloc size for MolSelfEnergy to cache self energy for each kind of molecule
   MolSelfEnergy = (double*)malloc(molLookup.GetNumKind());
   std::fill_n(MolSelfEnergy, molLookup.GetNumKind(), 0.0);
}

SystemPotential CalculateEnergy::SystemTotal()
{
   SystemPotential pot =
      SystemInter(SystemPotential(), currentCoords, currentCOM, currentAxes);
   //system intra
   for (uint b = 0; b < BOX_TOTAL; ++b)
   { 
     double bondEn = 0.0, nonbondEn = 0.0, self = 0.0, correction = 0.0;
     double distSq, dist;
     XYZ virComponents;
     MoleculeLookup::box_iterator thisMol = molLookup.BoxBegin(b), end = molLookup.BoxEnd(b);
     while (thisMol != end)
       {
	 MoleculeIntra(bondEn, nonbondEn, *thisMol, b);
	 //if ewald is activated, calculates electrostatic intra molecule (self energy and correction term)
	 if(DoEwald){
	   MolCorrection(correction, *thisMol, b);
	 }
	 ++thisMol;
       }
     correction = -correction;
     
     pot.boxEnergy[b].intraBond = bondEn;
     pot.boxEnergy[b].intraNonbond = nonbondEn;
     
     if(DoEwald){
       BoxSelf(self, b);
       self = -1.0 * self * calp[b] * qqfact / sqrt(M_PI);
       
       pot.boxEnergy[b].self = self;
       pot.boxEnergy[b].correction = correction*qqfact;

#ifdef RECIP
   //if ewald is activated, calculates ewald reciprocal energy     
       SetupRecip(b);	
       pot.boxEnergy[b].recip = BoxReciprocal(b);
#endif
       pot.boxEnergy[b].elect += (pot.boxEnergy[b].self + pot.boxEnergy[b].correction + pot.boxEnergy[b].recip);	
     }//end if DoEwald
   }//end for
   pot.Total();
   printf("LJ energy: %lf, real: %lf, recip: %lf, self: %lf, correction: %lf, intraBond: %lf, intraNonbond: %lf\n", pot.totalEnergy.inter,
	   pot.totalEnergy.real, pot.totalEnergy.recip, pot.totalEnergy.self, pot.totalEnergy.correction, pot.totalEnergy.intraBond, pot.totalEnergy.intraNonbond);
   return pot;
}

SystemPotential CalculateEnergy::SystemInter
(SystemPotential potential,
 XYZArray const& coords,
 XYZArray const& com,
 BoxDimensions const& boxAxes)
{
   for (uint b = 0; b < BOXES_WITH_U_NB; ++b)
   {
      potential += BoxInter(SystemPotential(), coords, com, boxAxes, b);
   }
   potential.Total();
   return potential;
}


SystemPotential CalculateEnergy::BoxInter(SystemPotential potential,
                                          XYZArray const& coords,
                                          XYZArray const& com,
                                          BoxDimensions const& boxAxes,
                                          const uint box) 
{
   //Handles reservoir box case, returning zeroed structure if
   //interactions are off.
   if (box >= BOXES_WITH_U_NB) return potential;
   //calculate the alpha over box size.
   Calp(box, boxAxes.axis.BoxSize(box));
   Intermolecular inter, real;
   double dist, erfc_variable;
#ifdef CELL_LIST
   CellList::Pairs pair = cellList.EnumeratePairs(box);
   while (!pair.Done()) 
   {
      XYZ virComponents;
      double distSq;
      if (!SameMolecule(pair.First(), pair.Second()) &&
	  boxAxes.InRcut(distSq, virComponents,
			 coords, pair.First(), pair.Second(), box)) 
      {
	 double partVirial = 0.0;
		  
	 forcefield.particles->CalcAdd(inter.energy, partVirial, distSq,
	    particleKind[pair.First()], particleKind[pair.Second()]);

#ifdef REAL
	 //If Ewald is activated, add ewald inter molecular energy
	 if(DoEwald){
		 dist = sqrt(distSq);
		 erfc_variable = calp[box] * dist;
		 real.energy = real.energy + particleCharge[pair.First()] * particleCharge[pair.Second()] * (1 - erf(erfc_variable)) / dist ;
	 }
#endif
	 //Add to our pressure components.
	 inter.virial -= geom::Dot(virComponents * partVirial,
				   boxAxes.MinImage
				   (com.Difference(particleMol[pair.First()], 
				    particleMol[pair.Second()]), box));
      }
      pair.Next();
   }
#else
   MoleculeLookup::box_iterator thisMol = molLookup.BoxBegin(box);
   MoleculeLookup::box_iterator end = molLookup.BoxEnd(box);
   while (thisMol != end)
   {
      uint m1 = *thisMol;
      MoleculeKind const& thisKind = mols.GetKind(m1);
      //evaluate interaction with all molecules after this
      MoleculeLookup::box_iterator otherMol = thisMol;
      ++otherMol;
      while (otherMol != end)
      {
	 uint m2 = *otherMol;
	 XYZ fMol;
	 MoleculeKind const& otherKind = mols.GetKind(m2);
	 for (uint i = 0; i < thisKind.NumAtoms(); ++i)
         {
	    for (uint j = 0; j < otherKind.NumAtoms(); ++j)
	    {
	       XYZ virComponents;
	       double distSq;
	       if (boxAxes.InRcut(distSq, virComponents,
				  coords, mols.start[m1] + i,
				  mols.start[m2] + j, box))
               {
		  double partVirial = 0.0;
		  
		  forcefield.particles->CalcAdd(inter.energy,
						      partVirial, distSq,
						      thisKind.AtomKind(i),
						      otherKind.AtomKind(j));

		  //Add to our pressure components.
		  fMol += (virComponents * partVirial);
	       }
	    }
	 }
	 
	 //Pressure is wrt center of masses of two molecules.
	 inter.virial -= geom::Dot(fMol,
			     boxAxes.MinImage
			     (com.Difference(m1, m2), box));
	 
	 ++otherMol;
      }
      ++thisMol;
   }
#endif
   
   potential.boxEnergy[box].inter = inter.energy;
   potential.boxVirial[box].inter = inter.virial;

#ifdef REAL
     if(DoEwald){
		potential.boxEnergy[box].real = real.energy * qqfact;
		  potential.boxEnergy[box].elect += potential.boxEnergy[box].real;
		  }
#endif
   if (forcefield.useLRC) 
   {
      FullTailCorrection(potential, boxAxes, box);
   }

   potential.Total();

   return potential;
}

void CalculateEnergy::MoleculeInter(Intermolecular &inter,
									Elect &real,
									XYZArray const& molCoords,
                                    const uint molIndex,
                                    const uint box,
                                    XYZ const*const newCOM) const
{   
   if (box < BOXES_WITH_U_NB)
   {
     double dist, erfc_variable;
     Intermolecular localInter;
     Elect localReal;
     bool hasNewCOM = !(newCOM == NULL);
#ifdef CELL_LIST
      uint length = mols.GetKind(molIndex).NumAtoms();
      uint start = mols.MolStart(molIndex);
      for (uint p = 0; p < length; ++p) 
      {
	 uint atom = start + p;
	 CellList::Neighbors n = cellList.EnumerateLocal(currentCoords[atom], 
							 box);
	 while (!n.Done()) 
	 {
	    double distSq = 0.0;
	    XYZ virComponents;
	    //Subtract old energy
	    if (currentAxes.InRcut(distSq, virComponents, 
				   currentCoords, atom, *n, box)) 
	    {
	       double partVirial = 0.0;	   
	       forcefield.particles->CalcSub(localInter.energy,
					    partVirial, distSq,
					    particleKind[atom],
					    particleKind[*n]);

#ifdef REAL
		   if(DoEwald){
			   //Subtract old real energy
			   dist = sqrt(distSq);
			   erfc_variable = calp[box] * dist;
			   localReal.energy -= ( particleCharge[atom] * particleCharge[*n] * (1 - erf(erfc_variable)) / dist);
		   }
#endif 
	       //Add to our pressure components.
	       localInter.virial -= geom::Dot(virComponents * partVirial,
					 currentAxes.MinImage
					 (currentCOM.Difference
					  (molIndex, particleMol[*n]), box));
	    } 
	    n.Next();
	 }
	 n = cellList.EnumerateLocal(molCoords[p], box);
	 while (!n.Done()) 
	 {
	    double distSq = 0.0;
	    XYZ virComponents;
	    if (currentAxes.InRcut(distSq, virComponents, 
				   molCoords, p, currentCoords, *n, box)) 
	    {
	       double partVirial = 0.0;	   
	       forcefield.particles->CalcAdd(localInter.energy, partVirial,
						   distSq, particleKind[atom],
						   particleKind[*n]);
#ifdef REAL	       
		   if(DoEwald){
			   //Add new ewald real energy
			   dist = sqrt(distSq);
			   erfc_variable = calp[box] * dist;
			   localReal.energy += ( particleCharge[atom] * particleCharge[*n] *  (1 - erf(erfc_variable)) / dist);
		   }
#endif

	       if (hasNewCOM)
	       {
		  //Add to our pressure components.
		  localInter.virial -= geom::Dot(virComponents * partVirial,
					     currentAxes.MinImage
					     (*newCOM - 
					      currentCOM.Get(particleMol[*n]),
					      box));
	       }
	       else
	       {
		  localInter.virial -= geom::Dot(virComponents * partVirial,
					     currentAxes.MinImage
					     (currentCOM.Difference
					      (molIndex, particleMol[*n]), 
					      box));
	       }
	    }
	    n.Next();
	 }
      }
#else
      MoleculeLookup::box_iterator otherMol = molLookup.BoxBegin(box);
      MoleculeLookup::box_iterator end = molLookup.BoxEnd(box);
      uint partStartMolI, partLenMolI, partStartMolJ, partLenMolJ, pkI, pkJ,
	 pOldI, pNewI, pJ;
      partStartMolI = partLenMolI = partStartMolJ = partLenMolJ = pkI = pkJ =
	 pOldI = pNewI = pJ = 0;
      mols.GetRangeStartLength(partStartMolI, partLenMolI, molIndex);
      const MoleculeKind& thisKind = mols.GetKind(molIndex);
      //looping over all molecules in box
      while (otherMol != end)
      {
         uint m2 = *otherMol;
         XYZ fMolO, fMolN;
         //except itself
         if (m2 != molIndex)
         {
            const MoleculeKind& otherKind = mols.GetKind(m2);
            //compare all particle pairs
            for (uint i = 0; i < partLenMolI; ++i)
            {
               pOldI = i + partStartMolI;
               pkI = thisKind.AtomKind(i);
               mols.GetRangeStartLength(partStartMolJ, partLenMolJ, m2);
               for (uint j = 0; j < partLenMolJ; ++j)
               {
                  XYZ virComponents;
                  double distSq;
                  pJ = j + partStartMolJ;
                  pkJ = otherKind.AtomKind(j);
                  //Subtract old energy
                  if (currentAxes.InRcut(distSq, virComponents,
                                         currentCoords, pOldI, pJ, box))
                  {
                     double partVirial = 0.0;
                     
                     forcefield.particles->CalcSub
                        (result.energy, partVirial, distSq, pkI, pkJ);
                     
                     fMolO += virComponents * partVirial;
                  }
                  //Add new energy
                  if (currentAxes.InRcut(distSq, virComponents, molCoords, i,
                                         currentCoords, pJ, box))
                  {
                     double partVirial = 0.0;
                     
                     forcefield.particles->CalcAdd(result.energy,
							 partVirial,
							 distSq, pkI, pkJ);
                     
                     //Add to our pressure components.
                     fMolN += (virComponents * partVirial);
                  }
               }
            }
            //Pressure is wrt center of masses of two molecules.
            result.virial -= geom::Dot(fMolO,
                                       currentAxes.MinImage
                                       (currentCOM.Difference(molIndex, m2),
                                        box));
            if (hasNewCOM)
            {
               result.virial -= geom::Dot(fMolN,
                                          currentAxes.MinImage
                                          (*newCOM - currentCOM.Get(m2), box));
            }
            else
            {
               result.virial -= geom::Dot(fMolN,
                                          currentAxes.MinImage
                                          (currentCOM.Difference(molIndex, m2),
                                           box));
            }
         }
         
         ++otherMol;
      }
#endif

#ifdef REAL
	  localReal.energy *= qqfact;
	real = localReal;
#endif
	inter = localInter;
   }
}

void CalculateEnergy::ParticleNonbonded(double* energy,
                                        cbmc::TrialMol const& trialMol,
                                        XYZArray const& trialPos,
                                        const uint partIndex,
                                        const uint box,
                                        const uint trials) const
{
   if (box >= BOXES_WITH_U_B)
      return;
   
   const MoleculeKind& kind = trialMol.GetKind();
   //loop over all partners of the trial particle
   const uint* partner = kind.sortedNB.Begin(partIndex);
   const uint* end = kind.sortedNB.End(partIndex);
   while (partner != end)
   {
      if (trialMol.AtomExists(*partner))
      {
         for (uint t = 0; t < trialPos.Count(); ++t)
         {
            double distSq;
            if (currentAxes.InRcut(distSq, trialPos, t, trialMol.GetCoords(),
				   *partner, box))
            {
               energy[t] +=
		 forcefield.particles->CalcEn(distSq,
						    kind.AtomKind(partIndex),
						    kind.AtomKind(*partner));
            }
         }
      }
      ++partner;
   }
}

//! Calculates Nonbonded intra energy for candidate positions in trialPos
void CalculateEnergy::ParticleInter(double* en, double *real, 
                                    XYZArray const& trialPos,
                                    const uint partIndex,
                                    const uint molIndex,
                                    const uint box,
                                    const uint trials) const
{
   if (box >= BOXES_WITH_U_NB)
      return;
   
   double distSq, dist, erfc_variable;
   MoleculeKind const& thisKind = mols.GetKind(molIndex);
  uint kindI = thisKind.AtomKind(partIndex);
#ifdef CELL_LIST
  //uint kind = particleKind[partIndex];
   for(int t = 0; t < trials; ++t) 
   {
      CellList::Neighbors n = cellList.EnumerateLocal(trialPos[t], box);
      while (!n.Done())
      {
         int atom = *n;
         distSq = 0.0;
         if (currentAxes.InRcut(distSq, trialPos, t, currentCoords, atom, box)) 
		{
            en[t] += forcefield.particles->CalcEn(distSq, kindI, particleKind[atom]);
#ifdef REAL		
	    if(DoEwald){
	      dist = sqrt(distSq);
	      erfc_variable = calp[box] * dist;
	      real[t] += ( ( particleCharge[atom] * thisKind.atomCharge[partIndex] * (1 - erf(erfc_variable)) / dist) * qqfact ); 
	    }
#endif
         }
         n.Next();
      }
#ifdef DEBUG
	  printf("trial: %d, inter: %lf, real: %lf, position: (%lf, %lf, %lf)\n", t, en[t], real[t], trialPos[t].x, trialPos[t].y, trialPos[t].z);
#endif
 }   
#else
   MoleculeLookup::box_iterator molInBox = molLookup.BoxBegin(box);
   MoleculeLookup::box_iterator end = molLookup.BoxEnd(box);
   //looping over all molecules in box
   while (molInBox != end)
   {
      uint otherMol = *molInBox;
      //except itself
      if (otherMol != molIndex)
      {
         MoleculeKind const& otherKind = mols.GetKind(otherMol);
         uint otherStart = mols.MolStart(otherMol);
         uint otherLength = otherKind.NumAtoms();
         //compare all particle pairs
         for (uint j = 0; j < otherLength; ++j)
         {
            uint kindJ = otherKind.AtomKind(j);
            for (uint t = 0; t < trialPos.Count(); ++t)
            {
	       double distSq = 0.0;
               if (currentAxes.InRcut(distSq, trialPos, t, currentCoords,
                  otherStart + j, box))
               {
                  en[t] += forcefield.particles->CalcEn(distSq, kindI,
							      kindJ);
               }
            }
         }
      }
      ++molInBox;
   }
#endif
   return;
}

double CalculateEnergy::MoleculeVirial(const uint molIndex,
                                       const uint box) const
{
   double virial = 0;
   if (box < BOXES_WITH_U_NB)
   {
      const MoleculeKind& thisKind = mols.GetKind(molIndex);
      uint thisStart = mols.MolStart(molIndex);
      uint thisLength = thisKind.NumAtoms();
#ifdef CELL_LIST
      for (uint p = 0; p < thisLength; ++p) 
      {
	 uint atom = thisStart + p;
	 CellList::Neighbors n =
	    cellList.EnumerateLocal(currentCoords[atom], box);
	 while (!n.Done()) 
	 {
	    double distSq = 0.0;
	    XYZ virComponents;
	    if (particleMol[atom] != particleMol[*n] &&
		currentAxes.InRcut(distSq, virComponents, currentCoords, 
				   atom, *n, box))
	    {
	       double mag = forcefield.particles->CalcVir(distSq,
							 particleKind[atom],
							 particleKind[*n]);
	       
	       virial -= geom::Dot(virComponents * mag,
				   currentAxes.MinImage
				   (currentCOM.Difference(particleMol[atom],
							  particleMol[*n]), 
				    box));
	    }
	    n.Next();
	 }
      }
#else
      MoleculeLookup::box_iterator molInBox = molLookup.BoxBegin(box);
      MoleculeLookup::box_iterator end = molLookup.BoxEnd(box);      
      //looping over all molecules in box
      while (molInBox != end)
      {
         uint otherMol = *molInBox;
         //except itself
         if(otherMol == molIndex)
         {
            ++molInBox;
            continue;
         }
         const MoleculeKind& otherKind = mols.GetKind(otherMol);
         XYZ forceOnMol;
         for (uint i = 0; i < thisLength; ++i)
         {
            uint kindI = thisKind.AtomKind(i);
            uint otherStart = mols.MolStart(otherMol);
            uint otherLength = otherKind.NumAtoms();
            for (uint j = 0; j < otherLength; ++j)
            {
               XYZ forceVector;
               double distSq = 0.0;
               uint kindJ = otherKind.AtomKind(j);
               if (currentAxes.InRcut(distSq, forceVector, 
                                      currentCoords, thisStart + i,
                                      otherStart + j, box))
                  {
                     //sum forces between all particles in molecule pair
                     double mag = forcefield.particles->CalcVir(distSq,
                                                               kindI, kindJ);
                     forceOnMol += forceVector * mag;
                  }
            }
         }
         //correct for center of mass
         virial -= geom::Dot(forceOnMol, 
                             currentAxes.MinImage(currentCOM.Get(molIndex) - 
                                                  currentCOM.Get(otherMol),
                                                  box));
         ++molInBox;
      }
#endif
   }
   return virial;
}


//Calculates the change in the TC from adding numChange atoms of a kind
Intermolecular CalculateEnergy::MoleculeTailChange(const uint box,
                                                   const uint kind,
                                                   const bool add) const
{
   Intermolecular delta;
   
   if (box < BOXES_WITH_U_NB)
   {
   
      double sign = (add ? 1.0 : -1.0);
      uint mkIdxII = kind * mols.kindsCount + kind;
      for (uint j = 0; j < mols.kindsCount; ++j)
      {
         uint mkIdxIJ = j * mols.kindsCount + kind;
         double rhoDeltaIJ_2 = sign * 2.0 * 
            (double)(molLookup.NumKindInBox(j, box)) * currentAxes.volInv[box];
         delta.energy += mols.pairEnCorrections[mkIdxIJ] * rhoDeltaIJ_2;
         delta.virial -= mols.pairVirCorrections[mkIdxIJ] * rhoDeltaIJ_2;
      }
      //We already calculated part of the change for this type in the loop
      delta.energy += mols.pairEnCorrections[mkIdxII] * 
	 currentAxes.volInv[box];
      delta.virial -= mols.pairVirCorrections[mkIdxII] *
         currentAxes.volInv[box];
   }
   return delta;
}


//Calculates intramolecular energy of a full molecule
void CalculateEnergy::MoleculeIntra(double& bondEn,
                                    double& nonBondEn,
                                    const uint molIndex,
                                    const uint box) const
{
   MoleculeKind& molKind = mols.kinds[mols.kIndex[molIndex]];
   // *2 because we'll be storing inverse bond vectors
   XYZArray bondVec(molKind.bondList.count * 2);
   BondVectors(bondVec, molKind, molIndex, box);
   MolBond(bondEn, molKind, bondVec, box);
   MolAngle(bondEn, molKind, bondVec, box);
   MolDihedral(bondEn, molKind, bondVec, box);
   MolNonbond(nonBondEn, molKind, molIndex, box);
}

void CalculateEnergy::BondVectors(XYZArray & vecs,
                                  MoleculeKind const& molKind,
                                  const uint molIndex,
                                  const uint box) const
{
   for (uint i = 0; i < molKind.bondList.count; ++i)
   {
      uint p1 = mols.start[molIndex] + molKind.bondList.part1[i];
      uint p2 = mols.start[molIndex] + molKind.bondList.part2[i];
      XYZ dist = currentCoords.Difference(p2, p1);
      dist = currentAxes.MinImage(dist, box);

      //store inverse vectors at i+count
      vecs.Set(i, dist);
      vecs.Set(i + molKind.bondList.count, -dist.x, -dist.y, -dist.z);
   }
}


void CalculateEnergy::MolBond(double & energy,
                              MoleculeKind const& molKind,
                              XYZArray const& vecs,
                              const uint box) const
{
   if (box >= BOXES_WITH_U_B)
      return;
   for (uint b = 0; b < molKind.bondList.count; ++b)
   {
      energy += forcefield.bonds.Calc(molKind.bondList.kinds[b],
				      vecs.Get(b).Length());
   }
}

void CalculateEnergy::MolAngle(double & energy,
                               MoleculeKind const& molKind,
                               XYZArray const& vecs,
                               const uint box) const
{
   if (box >= BOXES_WITH_U_B)
      return;
   for (uint a = 0; a < molKind.angles.Count(); ++a)
   {
      //Note: need to reverse the second bond to get angle properly.
      double theta = Theta(vecs.Get(molKind.angles.GetBond(a, 0)),
			   -vecs.Get(molKind.angles.GetBond(a, 1)));
      energy += forcefield.angles->Calc(molKind.angles.GetKind(a), theta);
   }
}

void CalculateEnergy::MolDihedral(double & energy,
                                  MoleculeKind const& molKind,
                                  XYZArray const& vecs,
                                  const uint box) const
{
   if (box >= BOXES_WITH_U_B)
      return;
   for (uint d = 0; d < molKind.dihedrals.Count(); ++d)
   {
      double phi = Phi(vecs.Get(molKind.dihedrals.GetBond(d, 0)),
		       vecs.Get(molKind.dihedrals.GetBond(d, 1)),
		       vecs.Get(molKind.dihedrals.GetBond(d, 2)));
      energy += forcefield.dihedrals.Calc(molKind.dihedrals.GetKind(d), phi);
   }
}

void CalculateEnergy::MolNonbond(double & energy,
                                 MoleculeKind const& molKind,
                                 const uint molIndex,
                                 const uint box) const
{
   if (box >= BOXES_WITH_U_B)
      return;
   
   double distSq;
   double virial; //we will throw this away
   for (uint i = 0; i < molKind.nonBonded.count; ++i)
   {
      uint p1 = mols.start[molIndex] + molKind.nonBonded.part1[i];
      uint p2 = mols.start[molIndex] + molKind.nonBonded.part2[i];
      if (currentAxes.InRcut(distSq, currentCoords, p1, p2, box))
      {
         forcefield.particles->CalcAdd(energy, virial, distSq,
                                      molKind.AtomKind
                                      (molKind.nonBonded.part1[i]),
                                      molKind.AtomKind
                                      (molKind.nonBonded.part2[i]));
      }
   }
}

//!Calculates energy and virial tail corrections for the box
void CalculateEnergy::FullTailCorrection(SystemPotential& pot, 
                                         BoxDimensions const& boxAxes, 
                                         const uint box) const
{
   if (box < BOXES_WITH_U_NB)
   {
      double en = 0.0;
      double vir = 0.0;

      for (uint i = 0; i < mols.kindsCount; ++i)
      {
         uint numI = molLookup.NumKindInBox(i, box);
         for (uint j = 0; j < mols.kindsCount; ++j)
         {
            uint numJ = molLookup.NumKindInBox(j, box);
            en += mols.pairEnCorrections[i * mols.kindsCount + j] * numI * numJ
               * boxAxes.volInv[box];
            vir -= mols.pairVirCorrections[i * mols.kindsCount + j] *
               numI * numJ * boxAxes.volInv[box];
         }
      }
      pot.boxEnergy[box].tc = en;
      pot.boxVirial[box].tc = vir;
   }
}


//error function
double CalculateEnergy::erf(double x) const{
	double a1 = 0.254829592;
	double a2 = -0.284496736;
	double a3 = 1.421413741;
	double a4 = -1.453152027;
	double a5 = 1.061405429;
	double p = 0.3275911;

	//save the sign of x
	int sign = 1;
	if(x < 0)
		sign = -1;
	x = fabs(x);

	double t = 1.0/(1.0 + p*x);
	double y = 1.0 - ((((a5*t+a4)*t+a3)*t+a2)*t+a1)*t*exp(-x*x);

	return sign*y;
}

void CalculateEnergy::MolCorrection(double &correction, uint molIndex, int box) const
{
if (box >= BOXES_WITH_U_NB)
      return;
	double dist, distSq;
	XYZ virComponents;
	MoleculeKind& thisKind = mols.kinds[mols.kIndex[molIndex]];
	for(uint i = 0; i < thisKind.NumAtoms(); i++){
		for(uint j = i+1; j < thisKind.NumAtoms(); j++){
			currentAxes.InRcut(distSq, virComponents, currentCoords, mols.start[molIndex] + i, mols.start[molIndex] + j, box);
			dist = sqrt(distSq);
			correction = correction + ( thisKind.atomCharge[i] * thisKind.atomCharge[j] * erf(calp[box] * dist) / dist);
		}//end for
	}//end for
}


void CalculateEnergy::SetupRecip(int box){
  if(box >= BOXES_WITH_U_NB)
    return;
	int count = 0;
	double alpsqr4 = 4.0 * calp[box] * calp[box];
	double cst = 2 * M_PI / currentAxes.axis.BoxSize(box);
	double ksqr;
	for(double x = 0.0; x <= kmax1; x++)
	{
		int nky_max = sqrt(pow(kmax1,2) - pow(x,2));
		int nky_min = -nky_max;
		if(x == 0.0)
			nky_min = 0;
		for(double y = nky_min; y <= nky_max; y++)
		{
			int nkz_max = sqrt(pow(kmax1,2)-pow(x,2)-pow(y,2));
			int nkz_min = -nkz_max;
			if(x == 0.0 && y == 0.0)
				nkz_min = 1;
			for(double z = nkz_min; z <= nkz_max; z++)
			{
				kxyz[box][count][0] = cst * x;
				kxyz[box][count][1] = cst * y;
			        kxyz[box][count][2] = cst * z;
				ksqr = kxyz[box][count][0]*kxyz[box][count][0] + kxyz[box][count][1]*kxyz[box][count][1] + kxyz[box][count][2]*kxyz[box][count][2];
				prefact[box][count] = qqfact * exp(-ksqr/alpsqr4)/(ksqr * (currentAxes.volume[box]/4/M_PI));
				count++;
			}
		}
	}
	RecipSize[box] = count;
}

double CalculateEnergy::BoxReciprocal(int box){
	
	Intermolecular recip;
	MoleculeLookup::box_iterator end = molLookup.BoxEnd(box);
	if(box < BOXES_WITH_U_NB){
	    for(int i = 0; i < RecipSize[box]; i++){
	      double SinSum = 0.0, CosSum = 0.0;
	      MoleculeLookup::box_iterator thisMol = molLookup.BoxBegin(box);
	      while(thisMol != end){
		uint m1 = *thisMol;
		MoleculeKind const& thisKind = mols.GetKind(m1);
		for(uint j = 0; j < thisKind.NumAtoms(); j++){
		 
		  double DotProduct = currentAxes.DotProduct(mols.start[m1]+j, kxyz[box][i][0], kxyz[box][i][1], kxyz[box][i][2], currentCoords,  box);
		  SinSum += (thisKind.atomCharge[j] * sin(DotProduct));
		  CosSum += (thisKind.atomCharge[j] * cos(DotProduct));
		}
		thisMol++;
	      }
	      RecipSinSum[i + box*RecipSize[box] ] = SinSum;
	      RecipCosSum[i + box*RecipSize[box] ] = CosSum;
	      recip.energy += ( (SinSum*SinSum + CosSum*CosSum) * prefact[box][i]);
	    }
	}//end if
	return recip.energy;
}

double CalculateEnergy::MolReciprocal(XYZArray const& molCoords,
									const uint molIndex,
				      const uint box, XYZ const*const newCOM){
	double RecipNew = 0.0, RecipOld = 0.0;
	double kx, ky, kz, prefactVal, SinSum, CosSum, RecipSin, RecipCos;
	if(box < BOXES_WITH_U_NB){
		MoleculeKind const& thisKind = mols.GetKind(molIndex);
		for(int image = 0; image < RecipSize[box]; image++){
			double OldSin = 0.0, OldCos = 0.0, NewSin = 0.0, NewCos = 0.0;

			uint length = thisKind.NumAtoms();
			uint startAtom = mols.MolStart(molIndex);
			for (uint p = 0; p < length; ++p) {
				uint atom = startAtom + p;
				double kx = kxyz[box][image][0];
				double ky = kxyz[box][image][1];
				double kz = kxyz[box][image][2];
				double DotProductOld = currentAxes.DotProduct(atom, kx, ky, kz, currentCoords,  box);
		    		double DotProductNew = currentAxes.DotProduct(p, kx, ky, kz, molCoords, box);
			    
				OldSin += thisKind.atomCharge[p] * sin(DotProductOld);
				OldCos += thisKind.atomCharge[p] * cos(DotProductOld);
				NewSin += thisKind.atomCharge[p] * sin(DotProductNew);
				NewCos += thisKind.atomCharge[p] * cos(DotProductNew);
			}//end for p
			SinSumNew[image + box*RecipSize[box] ] = RecipSinSum[image + box*RecipSize[box] ] - OldSin + NewSin;
			CosSumNew[image + box*RecipSize[box] ] = RecipCosSum[image + box*RecipSize[box] ] - OldCos + NewCos;
		}//end for image

		for(int image = 0; image < RecipSize[box]; image++){
		        prefactVal = prefact[box][image];
			SinSum = SinSumNew[image + box*RecipSize[box] ];
			CosSum = CosSumNew[image + box*RecipSize[box] ];
			RecipSin = RecipSinSum[image + box*RecipSize[box] ];
			RecipCos = RecipCosSum[image + box*RecipSize[box] ];
		        RecipNew = RecipNew + (SinSum * SinSum + CosSum * CosSum) * prefactVal;
			RecipOld = RecipOld + (RecipSin*RecipSin + RecipCos*RecipCos) * prefactVal;
		}
	}//end if
	return (RecipNew - RecipOld);
}

double CalculateEnergy::SwapDestRecip(cbmc::TrialMol Mol, const uint box){
	
  double RecipNew = 0.0, RecipOld = 0.0;
  double prefactVal, SinSum, CosSum, RecipSin, RecipCos;
	if(box < BOXES_WITH_U_NB){
		MoleculeKind const& thisKind = Mol.GetKind();
		XYZArray molCoords = Mol.GetCoords();
		for(int image = 0; image < RecipSize[box]; image++){
			double NewSin = 0.0, NewCos = 0.0;

			uint length = thisKind.NumAtoms();
			for (uint p = 0; p < length; ++p) {
			  double DotProductNew = currentAxes.DotProduct(p, kxyz[box][image][0], kxyz[box][image][1], kxyz[box][image][2], molCoords, box);

				NewSin += thisKind.atomCharge[p] * sin(DotProductNew);
				NewCos += thisKind.atomCharge[p] * cos(DotProductNew);
			}//end for p
			SinSumNew[image + box*RecipSize[box]] = RecipSinSum[image + box*RecipSize[box]] + NewSin;
			CosSumNew[image + box*RecipSize[box]] = RecipCosSum[image + box*RecipSize[box]] + NewCos;
		}//end for image

		for(int image = 0; image < RecipSize[box]; image++){
		        prefactVal = prefact[box][image];
			SinSum = SinSumNew[image + box*RecipSize[box]];
			CosSum = CosSumNew[image + box*RecipSize[box]];
			RecipSin = RecipSinSum[image + box*RecipSize[box]];
			RecipCos = RecipCosSum[image + box*RecipSize[box]];
		        RecipNew = RecipNew + (SinSum * SinSum + CosSum * CosSum) * prefactVal;
			RecipOld = RecipOld + (RecipSin*RecipSin + RecipCos*RecipCos) * prefactVal;
		}
	}//end if
	return RecipNew - RecipOld;
}


double CalculateEnergy::SwapSourceRecip(uint molIndex, const uint box){
	
  double RecipOld = 0.0, RecipNew = 0.0;
  double prefactVal, SinSum, CosSum, RecipSin, RecipCos;
	uint atom;
	if(box < BOXES_WITH_U_NB){
		MoleculeKind const& thisKind = mols.GetKind(molIndex);
		uint startAtom = mols.MolStart(molIndex);
		for(int image = 0; image < RecipSize[box]; image++){
			double OldSin = 0.0, OldCos = 0.0;
			uint length = thisKind.NumAtoms();
			for (uint p = 0; p < length; ++p) {
				atom = startAtom + p;
				double DotProductOld = currentAxes.DotProduct(atom, kxyz[box][image][0], kxyz[box][image][1], kxyz[box][image][2], currentCoords, box);

				OldSin += thisKind.atomCharge[p] * sin(DotProductOld);
				OldCos += thisKind.atomCharge[p] * cos(DotProductOld);
			}//end for p
			SinSumNew[image + box*RecipSize[box]] = RecipSinSum[image + box*RecipSize[box]] - OldSin;
			CosSumNew[image + box*RecipSize[box]] = RecipCosSum[image + box*RecipSize[box]] - OldCos;
		}//end for image

		for(int image = 0; image < RecipSize[box]; image++){
		        prefactVal = prefact[box][image];
			SinSum = SinSumNew[image + box*RecipSize[box]];
			CosSum = CosSumNew[image + box*RecipSize[box]];
			RecipSin = RecipSinSum[image + box*RecipSize[box]];
			RecipCos = RecipCosSum[image + box*RecipSize[box]];
		        RecipNew = RecipNew + (SinSum * SinSum + CosSum * CosSum) * prefactVal;
			RecipOld = RecipOld + (RecipSin*RecipSin + RecipCos*RecipCos) * prefactVal;
		}
	}//end if
	return RecipOld - RecipNew;       //return a positive value, which should be the absolute value to subtract
}


void CalculateEnergy::BoxSelf(double&self, int box){
  if (box >= BOXES_WITH_U_NB)
	  return;
  for(int i = 0; i < mols.kindsCount; i++){
    MoleculeKind const& thisKind = mols.kinds[i];
    int length = thisKind.NumAtoms();
    MolSelfEnergy[i] = 0.0;
    for(int j = 0; j < length; j++){
      MolSelfEnergy[i] += ( thisKind.atomCharge[j] * thisKind.atomCharge[j] );
    }
    self += ( MolSelfEnergy[i] * molLookup.NumKindInBox(i, box));
  }

}


void CalculateEnergy::SwapSelf(double *self, uint molIndex, uint partIndex, int box, uint trials) const
{
  if (box >= BOXES_WITH_U_NB)
	  return;
       
	MoleculeKind const& thisKind = mols.GetKind(molIndex);
	for(uint t = 0; t < trials; t++){
		//Calculating self term
		self[t] = -( thisKind.atomCharge[partIndex] * thisKind.atomCharge[partIndex] * calp[box] / sqrt(M_PI) * qqfact );
	}//end for
}

void CalculateEnergy::SwapCorrection(double* corr,
                                        cbmc::TrialMol const& trialMol,
                                        XYZArray const& trialPos,
                                        const uint partIndex,
                                        const uint box,
                                        const uint trials) const
{
   if (box >= BOXES_WITH_U_NB)
      return;
   double dist;
   const MoleculeKind& thisKind = trialMol.GetKind();
   //loop over all partners of the trial particle
   const uint* partner = thisKind.sortedEwaldNB.Begin(partIndex);
   const uint* end = thisKind.sortedEwaldNB.End(partIndex);
   while (partner != end)
   {
      if (trialMol.AtomExists(*partner))
      {
         for (uint t = 0; t < trials; ++t)
         {
            double distSq;
            if (currentAxes.InRcut(distSq, trialPos, t, trialMol.GetCoords(),
				   *partner, box))
            {
				dist = sqrt(distSq);
				corr[t] -= ( thisKind.atomCharge[*partner] * thisKind.atomCharge[partIndex] * erf(calp[box] * dist) / dist * qqfact);
            }
         }
      }
      ++partner;
   }
}
